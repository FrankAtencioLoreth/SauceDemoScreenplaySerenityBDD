pipeline {
    agent any

   /*
     Environments variables
   */
    environment {
        USER = "fatencio@gmail.com"
        PASS = "Admin123*"
        RECIPIENTS = "frank.atencio.loreth@gmail.com" // recipient's emails
    }

    /*
     Parameters definition
    */
    parameters {
        choice(
            name: "environment",
            choices: ["DEV", "QA", "PROD"],
            description: "Select a test environment"
        )
        choice(
            name: "typeTest",
            choices: ["Smoke", "Integration", "Regression"],
            description: "Select a test type"
        )
    }

    /*
     Build periodically
    */
    triggers {
        //Execute every Saturday at 8:00 AM
        cron("H 8 * * 6")
    }

    /*
     Tools and dependencies management
    */
    tools {
        gradle "Gradle"
    }

    /*
     Build, tests and deployment process
    */
    stages {

        stage("Clean workspace") {
            steps {
                echo "Cleaning workspace..."
                deleteDir()
            }
        }

        stage("Build project") {
            steps {
                echo "Building project"
                bat "gradle --version"
                git branch: "main", url: "https://github.com/FrankAtencioLoreth/SauceDemoScreenplaySerenityBDD.git"
            }
        }
        stage("Run tests") {
            parallel {
                stage ("Executing regression tests") {
                    when {
                        expression { params.typeTest == "Regression" }
                    }
                    steps {
                        echo "Type of test: ${params.typeTest}"
                        echo "With USER: ${USER} and PASS: ${PASS}"
                        echo "Executing tests in environment: ${environment}"
                        echo "Executing ${params.typeTest} tests"
                        bat 'gradle clean test -Dcucumber.filter.tags="@REGRESSION"'
                        echo "${params.typeTest} tests completed"
                    }
                }

                stage ("Executing smoke tests") {
                    when {
                        expression { params.typeTest == "Smoke" }
                    }
                    steps {
                        echo "Type of test: ${params.typeTest}"
                        echo "With USER: ${USER} and PASS: ${PASS}"
                        echo "Executing tests in environment: ${environment}"
                        echo "Executing ${params.typeTest} tests"
                        bat 'gradle clean test -Dcucumber.filter.tags="@SMOKE"'
                        echo "${params.typeTest} tests completed"
                    }
                }

                stage ("Executing integration tests") {
                    when {
                        expression { params.typeTest == "Integration" }
                    }
                    steps {
                        echo "Type of test: ${typeTest}"
                        echo "With USER: ${USER} and PASS: ${PASS}"
                        echo "Executing tests in environment: ${environment}"
                        echo "Executing ${params.typeTest} tests"
                        bat 'gradle clean test -Dcucumber.filter.tags="@INTEGRATION"'
                        echo "${params.typeTest} tests completed"
                    }
                }

            }
        }
    }

    post {
        always {

            echo "Generating html report ${env.BUILD_NUMBER}"

            publishHTML (
                target : [
                 allowMissing: false,
                 alwaysLinkToLastBuild: true,
                 keepAll: true,
                 reportDir: "target/site/serenity",
                 reportFiles: "report-"+"${env.BUILD_NUMBER}.html".replaceAll("5f", ""),
                 reportName: "report-"+"${env.BUILD_NUMBER}".replaceAll("5f", ""),
                 reportTitles: "The Report"
                ]
            )
            archiveArtifacts artifacts: 'target/site/serenity/', fingerprint: false, followSymlinks: true
        }

        success {
            echo "Pipeline execution successful"
            mail to: env.RECIPIENTS,
                 subject: "Pipeline ${env.JOB_NAME} (#${env.BUILD_NUMBER}) - Successfully completed",
                 body: """The pipeline ${env.JOB_NAME} (#${env.BUILD_NUMBER}) completed successfully.\nCheck the details here: ${env.BUILD_URL}"""
            echo "Email sent..."
        }

        failure {
            echo "Pipeline execution unsucessful. Review logs"
            mail to: env.RECIPIENTS,
                 subject: "Pipeline ${env.JOB_NAME} (#${env.BUILD_NUMBER}) - Failed",
                 body: """The pipeline ${env.JOB_NAME} (#${env.BUILD_NUMBER}) failed.\nPlease check the log here: ${env.BUILD_URL}"""
            echo "Email sent..."
        }
    }
}