plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'net.serenity-bdd.serenity-gradle-plugin' version '4.2.1'
    id 'org.sonarqube' version '4.4.1.3373'
}

defaultTasks 'clean', 'test', 'aggregate'

repositories {
    mavenCentral()
    mavenLocal()
}

allprojects {
    ext.baseVersion = "0.1"
    ext.snapshotVersion = true
    group = "org.sonarqube"
    version = "$baseVersion" + (snapshotVersion ? "-SNAPSHOT" : "")
}

sonar {
    properties {
        property "sonar.projectName", "SaucdeDemo Screemplay Serenity"
        property "sonar.projectKey", "org.sonarqube:saucedemo-screemplay-serenity"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.tests", "src/test/java"
        property "sonar.gradle.skipCompile", "true"
        property "sonar.exclusions", "**/CucumberTestSuite.java"
    }
}

ext {
    serenity_version = '4.2.6'
    junit_platform_launcher_version="1.11.0"
    cucumber_junit_platform_engine_version="7.16.1"
    junit_platform_suite_version="1.11.0"
    junit_jupiter_engine_version="5.11.0"
    junit_vintage_engine_version="5.11.0"
    logback_classic_version= '1.4.12'
    assertj_core_version="3.23.1"
    slf4j_version="2.0.13"
    lombok_version="1.18.34"
}

dependencies {
    testImplementation "net.serenity-bdd:serenity-core:${serenity_version}"
    testImplementation "net.serenity-bdd:serenity-cucumber:${serenity_version}"
    testImplementation "net.serenity-bdd:serenity-screenplay:${serenity_version}"
    testImplementation "net.serenity-bdd:serenity-screenplay-webdriver:${serenity_version}"
    testImplementation "net.serenity-bdd:serenity-ensure:${serenity_version}"
    testImplementation "org.junit.platform:junit-platform-launcher:${junit_platform_launcher_version}"
    testImplementation "io.cucumber:cucumber-junit-platform-engine:${cucumber_junit_platform_engine_version}"
    testImplementation "org.junit.platform:junit-platform-suite:${junit_platform_suite_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_engine_version}"
    testImplementation "org.junit.vintage:junit-vintage-engine:${junit_vintage_engine_version}"
    implementation "ch.qos.logback:logback-classic:${logback_classic_version}"
    testImplementation "org.assertj:assertj-core:${assertj_core_version}"
    implementation "org.slf4j:slf4j-simple:${slf4j_version}"
    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    testCompileOnly "org.projectlombok:lombok:${lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty "cucumber.filter.tags", System.getProperty("cucumber.filter.tags")
    systemProperty "cucumber.options", System.getProperty("cucumber.options")
    def parameter = "-Denvironment="
    def environment = System.getProperty("environment")
    jvmArgs(parameter + environment)
    finalizedBy tasks.named('aggregate')
}

gradle.startParameter.continueOnFailure = true
